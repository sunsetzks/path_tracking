"""
Simple test to verify the separation is working correctly
"""

def test_imports():
    """Test that imports work correctly"""
    print("Testing imports...")
    
    try:
        # Test core algorithm import (should work without matplotlib)
        from hybrid_astar import HybridAStar, VehicleModel, State, DirectionMode
        print("‚úì Core algorithm imported successfully")
        
        # Test that we can create instances
        vehicle = VehicleModel()
        planner = HybridAStar(vehicle_model=vehicle)
        state = State(x=0.0, y=0.0, yaw=0.0)
        print("‚úì Core classes instantiated successfully")
        
        # Test that planner has no matplotlib dependencies
        methods = [method for method in dir(planner) if not method.startswith('_')]
        viz_methods = [m for m in methods if 'visualize' in m.lower() or 'plot' in m.lower()]
        
        if not viz_methods:
            print("‚úì Core algorithm has no visualization methods")
        else:
            print(f"‚ö† Found visualization methods in core: {viz_methods}")
        
        # Test data storage for visualization
        planner.explored_nodes = []
        planner.simulation_trajectories = []
        viz_data = planner.get_visualization_data()
        if isinstance(viz_data, dict):
            print("‚úì Visualization data storage works")
        
        return True
        
    except ImportError as e:
        print(f"‚úó Core import failed: {e}")
        return False
    except Exception as e:
        print(f"‚úó Core test failed: {e}")
        return False


def test_visualization_import():
    """Test visualization import (optional)"""
    print("\nTesting visualization import...")
    
    try:
        from visualizer import HybridAStarVisualizer
        print("‚úì Visualizer imported successfully")
        
        # Test instantiation
        viz = HybridAStarVisualizer()
        print("‚úì Visualizer instantiated successfully")
        
        # Check methods
        viz_methods = [method for method in dir(viz) if not method.startswith('_')]
        expected_methods = ['visualize_path', 'visualize_search_progress', 'visualize_detailed_search_tree']
        
        for method in expected_methods:
            if hasattr(viz, method):
                print(f"‚úì Method {method} exists")
            else:
                print(f"‚úó Method {method} missing")
        
        return True
        
    except ImportError as e:
        print(f"‚ö† Visualization import failed (optional): {e}")
        return True  # This is OK, visualization is optional
    except Exception as e:
        print(f"‚úó Visualization test failed: {e}")
        return False


def test_no_matplotlib_in_core():
    """Test that core algorithm doesn't import matplotlib"""
    print("\nTesting matplotlib dependency separation...")
    
    try:
        # Import core without matplotlib
        import sys
        
        # Check if matplotlib was imported by core
        matplotlib_modules = [name for name in sys.modules.keys() if 'matplotlib' in name]
        
        # Import core
        from hybrid_astar import HybridAStar, VehicleModel
        
        # Check again after importing core
        new_matplotlib_modules = [name for name in sys.modules.keys() if 'matplotlib' in name]
        
        if len(new_matplotlib_modules) == len(matplotlib_modules):
            print("‚úì Core algorithm doesn't import matplotlib")
            return True
        else:
            print(f"‚úó Core algorithm imported matplotlib: {set(new_matplotlib_modules) - set(matplotlib_modules)}")
            return False
            
    except Exception as e:
        print(f"‚úó Matplotlib dependency test failed: {e}")
        return False


if __name__ == "__main__":
    print("Testing Hybrid A* Algorithm and Visualization Separation")
    print("=" * 60)
    
    # Test core functionality
    core_works = test_imports()
    
    # Test visualization (optional)
    viz_works = test_visualization_import()
    
    # Test separation 
    separation_works = test_no_matplotlib_in_core()
    
    print(f"\n{'='*60}")
    print("SEPARATION TEST RESULTS:")
    print(f"{'='*60}")
    print(f"Core Algorithm:        {'‚úì PASS' if core_works else '‚úó FAIL'}")
    print(f"Visualization Module:  {'‚úì PASS' if viz_works else '‚úó FAIL'}")
    print(f"Dependency Separation: {'‚úì PASS' if separation_works else '‚úó FAIL'}")
    
    all_passed = core_works and viz_works and separation_works
    
    if all_passed:
        print(f"\nüéâ SEPARATION SUCCESSFUL! üéâ")
        print("\nBenefits achieved:")
        print("  ‚úì Core algorithm is independent of visualization")
        print("  ‚úì No matplotlib dependency in core algorithm")
        print("  ‚úì Visualization is completely modular and optional")
        print("  ‚úì Algorithm can run in headless environments")
        print("  ‚úì Easier to test and maintain")
        print("  ‚úì Can use different visualization backends")
    else:
        print(f"\n‚ùå SEPARATION INCOMPLETE")
        
    print(f"\n{'='*60}")
